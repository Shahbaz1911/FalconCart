import { db } from './firebase';
import { collection, getDocs, doc, getDoc, addDoc, serverTimestamp, Timestamp } from 'firebase/firestore';
import type { Product } from './products';

export interface OrderItem {
  product: Product;
  quantity: number;
}

export interface Order {
  id: string;
  date: string;
  total: number;
  status: 'Processing' | 'Shipped' | 'Delivered';
  items: OrderItem[];
  shippingAddress: {
    fullName: string;
    address: string;
    city: string;
    state: string;
    zip: string;
    country: string;
  };
}

// Type for creating a new order, omitting fields generated by the server.
type OrderInput = Omit<Order, 'id' | 'date'>;

// Converts a Firestore Timestamp to a readable date string
const formatDate = (timestamp: Timestamp | Date) => {
    const date = timestamp instanceof Timestamp ? timestamp.toDate() : timestamp;
    return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    });
};

export async function getOrders(): Promise<Order[]> {
  if (!db) {
    console.warn("Firestore is not configured. Returning empty orders array.");
    return [];
  }
  try {
    const ordersCol = collection(db, 'orders');
    const orderSnapshot = await getDocs(ordersCol);
    const orderList = orderSnapshot.docs.map(doc => {
      const data = doc.data();
      return {
        ...data,
        id: doc.id,
        date: data.date ? formatDate(data.date) : 'Date not available',
      } as Order;
    });
    return orderList;
  } catch (error) {
    console.error("Error fetching orders:", error);
    return [];
  }
}

export async function getOrderById(id: string): Promise<Order | undefined> {
  if (!db) {
    console.warn("Firestore is not configured. Cannot fetch order by ID.");
    return undefined;
  }
  try {
    const orderDocRef = doc(db, 'orders', id);
    const orderSnap = await getDoc(orderDocRef);

    if (orderSnap.exists()) {
      const data = orderSnap.data();
      return {
        ...data,
        id: orderSnap.id,
        date: data.date ? formatDate(data.date) : 'Date not available',
      } as Order;
    }
    return undefined;
  } catch (error) {
    console.error(`Error fetching order with ID ${id}:`, error);
    return undefined;
  }
}

export async function createOrder(orderData: OrderInput): Promise<string> {
    if (!db) {
        throw new Error("Firestore is not initialized. Cannot create order.");
    }
    
    const orderPayload = {
        ...orderData,
        date: serverTimestamp() // Use Firestore's server-side timestamp
    };
    
    const docRef = await addDoc(collection(db, "orders"), orderPayload);
    return docRef.id;
}
